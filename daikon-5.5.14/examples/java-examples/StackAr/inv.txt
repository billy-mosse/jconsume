Daikon version 5.5.14, released October 3, 2017; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 1 time.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.push(java.lang.Object) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.MyInteger:::OBJECT
this.value == this.value2
this.value == 0
===========================================================================
DataStructures.MyInteger.MyInteger(int):::ENTER
x == 0
===========================================================================
DataStructures.MyInteger.MyInteger(int):::EXIT
this.value == orig(x)
===========================================================================
DataStructures.Overflow:::OBJECT
this has only one value
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.topOfStack <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack >= 0)  <==>  (return == false)
(this.topOfStack >= 0)  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack >= 0)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] != null)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
this.topOfStack >= 0
return == false
this.theArray[this.topOfStack] != null
===========================================================================
DataStructures.StackAr.isFull():::ENTER
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (this.theArray[] elements != null)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] elements != null
return == true
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.topOfStack <= orig(this.topOfStack)
orig(this.topOfStack) <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::ENTER
this.topOfStack >= 0
this.theArray[this.topOfStack] != null
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)] == null
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
orig(this.topOfStack) <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
x != null
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
orig(x) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
this.topOfStack >= 0
orig(this.theArray[post(this.topOfStack)]) == null
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
orig(this.topOfStack) < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::ENTER
===========================================================================
DataStructures.StackAr.top():::EXIT74
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT75
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack >= 0
return != null
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == return)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack >= 0)  <==>  (return != null)
(this.topOfStack >= 0)  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack >= 0)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[this.topOfStack]))
(this.topOfStack >= 0)  ==>  (return == this.theArray[orig(this.topOfStack)])
(this.topOfStack >= 0)  ==>  (return == this.theArray[this.topOfStack])
(this.topOfStack >= 0)  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.topOfStack >= 0)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] != null)
this.theArray.getClass().getName() != return.getClass().getName()
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
return.getClass().getName() in this.theArray[].getClass().getName()
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111
return == orig(this.theArray[this.topOfStack])
return != null
orig(this.topOfStack) >= 0
this.theArray[orig(this.topOfStack)] == null
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
size(this.theArray[]) == orig(size(this.theArray[]))
(return != null)  <==>  (orig(this.topOfStack) >= 0)
(return != null)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(return != null)  ==>  (return == orig(this.theArray[this.topOfStack]))
(return != null)  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(return != null)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(return != null)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
(return != null)  ==>  (this.topOfStack < size(this.theArray[])-1)
(return == null)  <==>  (orig(this.topOfStack) == -1)
(return == null)  <==>  (this.topOfStack == orig(this.topOfStack))
(return == null)  ==>  (orig(this.theArray[]) elements == null)
(return == null)  ==>  (orig(this.theArray[]) elements == return)
(return == null)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(return == null)  ==>  (this.theArray[] == orig(this.theArray[]))
(return == null)  ==>  (this.theArray[] elements == null)
(return == null)  ==>  (this.theArray[] elements == return)
(return == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(return == null)  ==>  (this.topOfStack == -1)
this.theArray.getClass().getName() != return.getClass().getName()
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.topOfStack <= orig(this.topOfStack)
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) <= size(this.theArray[])-1
===========================================================================
DataStructures.StackArTester:::CLASS
DataStructures.StackArTester.s != null
DataStructures.StackArTester.s.theArray != null
DataStructures.StackArTester.s.theArray.getClass().getName() == java.lang.Object[].class
DataStructures.StackArTester.s.topOfStack >= -1
DataStructures.StackArTester.rnd has only one value
DataStructures.StackArTester.rnd != null
DataStructures.StackArTester.t one of { 0.0, 4.3 }
DataStructures.StackArTester.u one of { 0.0, 5.7 }
DataStructures.StackArTester.v one of { 0.0, 10.0 }
DataStructures.StackArTester.s.topOfStack <= size(DataStructures.StackArTester.s.theArray[])-1
DataStructures.StackArTester.t <= DataStructures.StackArTester.u
DataStructures.StackArTester.t <= DataStructures.StackArTester.v
DataStructures.StackArTester.u <= DataStructures.StackArTester.v
===========================================================================
DataStructures.StackArTester.createItem(int):::ENTER
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
phase >= 0
DataStructures.StackArTester.s.topOfStack < size(DataStructures.StackArTester.s.theArray[])-1
phase <= size(DataStructures.StackArTester.s.theArray[])
phase != size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT23
return.getClass().getName() == DataStructures.MyInteger.class
orig(phase) == 0
size(DataStructures.StackArTester.s.theArray[]) one of { 2, 10, 20 }
orig(phase) < size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT25
return.getClass().getName() == java.lang.Object.class
orig(phase) == 1
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT27
return.getClass().getName() == DataStructures.MyInteger.class
orig(phase) == 2
size(DataStructures.StackArTester.s.theArray[]) one of { 2, 10, 20 }
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT29
return.getClass().getName() == java.lang.Object.class
orig(phase) == 3
size(DataStructures.StackArTester.s.theArray[]) one of { 3, 10, 20 }
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.s.theArray[] == orig(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
DataStructures.StackArTester.t == orig(DataStructures.StackArTester.t)
DataStructures.StackArTester.u == orig(DataStructures.StackArTester.u)
DataStructures.StackArTester.v == orig(DataStructures.StackArTester.v)
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
return != null
DataStructures.StackArTester.s.theArray.getClass().getName() != return.getClass().getName()
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.topOfStack < size(DataStructures.StackArTester.s.theArray[])-1
orig(phase) <= size(DataStructures.StackArTester.s.theArray[])
orig(phase) != size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.doNew(int):::ENTER
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
size >= 0
DataStructures.StackArTester.s.topOfStack < size
size != size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.doNew(int):::EXIT
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
DataStructures.StackArTester.t == orig(DataStructures.StackArTester.t)
DataStructures.StackArTester.u == orig(DataStructures.StackArTester.u)
DataStructures.StackArTester.v == orig(DataStructures.StackArTester.v)
orig(size) == size(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.topOfStack <= orig(size(DataStructures.StackArTester.s.theArray[]))-1
===========================================================================
DataStructures.StackArTester.ff(int):::ENTER
DataStructures.StackArTester.s has only one value
DataStructures.StackArTester.s.theArray has only one value
DataStructures.StackArTester.s.theArray[] contains only nulls and has only one value, of length 20
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
n == 4
size(DataStructures.StackArTester.s.theArray[]) == 20
DataStructures.StackArTester.s.theArray[] elements == DataStructures.StackArTester.s.theArray[n]
===========================================================================
DataStructures.StackArTester.ff(int):::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.s.theArray[] == orig(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
DataStructures.StackArTester.t == orig(DataStructures.StackArTester.t)
DataStructures.StackArTester.u == orig(DataStructures.StackArTester.u)
DataStructures.StackArTester.v == orig(DataStructures.StackArTester.v)
DataStructures.StackArTester.s has only one value
DataStructures.StackArTester.s.theArray has only one value
DataStructures.StackArTester.s.theArray[] contains only nulls and has only one value, of length 20
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
size(DataStructures.StackArTester.s.theArray[]) == 20
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.theArray[] elements == DataStructures.StackArTester.s.theArray[orig(n)]
===========================================================================
DataStructures.StackArTester.fill(int):::ENTER
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
DataStructures.StackArTester.s.topOfStack < n
n >= size(DataStructures.StackArTester.s.theArray[])
===========================================================================
DataStructures.StackArTester.fill(int):::EXIT
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
DataStructures.StackArTester.t == orig(DataStructures.StackArTester.t)
DataStructures.StackArTester.u == orig(DataStructures.StackArTester.u)
DataStructures.StackArTester.v == orig(DataStructures.StackArTester.v)
orig(n) == size(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.topOfStack <= orig(size(DataStructures.StackArTester.s.theArray[]))-1
size(DataStructures.StackArTester.s.theArray[])-1 >= orig(size(DataStructures.StackArTester.s.theArray[]))-1
===========================================================================
DataStructures.StackArTester.main(java.lang.String[]):::ENTER
DataStructures.StackArTester.s.theArray[] == args[]
DataStructures.StackArTester.s.topOfStack == size(DataStructures.StackArTester.s.theArray[])-1
DataStructures.StackArTester.s.topOfStack == size(args[])-1
DataStructures.StackArTester.t == DataStructures.StackArTester.u
DataStructures.StackArTester.t == DataStructures.StackArTester.v
DataStructures.StackArTester.s has only one value
DataStructures.StackArTester.s.theArray has only one value
DataStructures.StackArTester.s.theArray[] == []
DataStructures.StackArTester.s.theArray[].getClass().getName() == []
DataStructures.StackArTester.t == 0.0
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
DataStructures.StackArTester.s.theArray[] is the reverse of args[]
===========================================================================
DataStructures.StackArTester.main(java.lang.String[]):::EXIT
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.s.topOfStack == size(args[])-1
DataStructures.StackArTester.s.topOfStack == orig(size(DataStructures.StackArTester.s.theArray[]))-1
DataStructures.StackArTester.s.topOfStack == orig(size(args[]))-1
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
args[] == orig(DataStructures.StackArTester.s.theArray[])
args[] == orig(args[])
DataStructures.StackArTester.s has only one value
DataStructures.StackArTester.s.theArray has only one value
DataStructures.StackArTester.s.theArray[] contains only nulls and has only one value, of length 20
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
args[] == []
args[].toString == []
size(DataStructures.StackArTester.s.theArray[]) == 20
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
args[] is the reverse of orig(DataStructures.StackArTester.s.theArray[])
===========================================================================
DataStructures.StackArTester.observe():::ENTER
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
===========================================================================
DataStructures.StackArTester.observe():::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.s.theArray[] == orig(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
DataStructures.StackArTester.t == orig(DataStructures.StackArTester.t)
DataStructures.StackArTester.u == orig(DataStructures.StackArTester.u)
DataStructures.StackArTester.v == orig(DataStructures.StackArTester.v)
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
===========================================================================
DataStructures.StackArTester.push():::ENTER
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
DataStructures.StackArTester.s.topOfStack < size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.push():::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
DataStructures.StackArTester.t == orig(DataStructures.StackArTester.t)
DataStructures.StackArTester.u == orig(DataStructures.StackArTester.u)
DataStructures.StackArTester.v == orig(DataStructures.StackArTester.v)
size(DataStructures.StackArTester.s.theArray[]) == orig(size(DataStructures.StackArTester.s.theArray[]))
DataStructures.StackArTester.s.topOfStack >= 0
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
DataStructures.StackArTester.s.theArray[DataStructures.StackArTester.s.topOfStack] != null
orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)]) == null
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.topOfStack - orig(DataStructures.StackArTester.s.topOfStack) - 1 == 0
orig(DataStructures.StackArTester.s.topOfStack) < size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.topOrPop():::ENTER
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
===========================================================================
DataStructures.StackArTester.topOrPop():::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
DataStructures.StackArTester.t == orig(DataStructures.StackArTester.t)
DataStructures.StackArTester.u == orig(DataStructures.StackArTester.u)
DataStructures.StackArTester.v == orig(DataStructures.StackArTester.v)
size(DataStructures.StackArTester.s.theArray[]) == orig(size(DataStructures.StackArTester.s.theArray[]))
DataStructures.StackArTester.t == 4.3
DataStructures.StackArTester.u == 5.7
DataStructures.StackArTester.v == 10.0
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.topOfStack <= orig(DataStructures.StackArTester.s.topOfStack)
orig(DataStructures.StackArTester.s.topOfStack) <= size(DataStructures.StackArTester.s.theArray[])-1
Exiting Daikon.
