#! /usr/bin/env php
<?php

  class item {

    function item ($name, $level, $type) {

      $this->name = $name;
      $this->level = $level;
      $this->type = $type;
    }
  }

  class outline {

    var $indent;
    var $level;
    var $name;
    var $down;

    function outline ($name, $indent = 0, $level = 0) {
      $this->name = $name;
      $this->indent = $indent;
      $this->level = $level;
      $this->down = array();
    }

    function add ($item) {
      $this->down[] = $item;
    }
  }

  class bullet {

    var $indent;            // current indent (chars)
    var $level;             // current level in bullet hierarchy
    var $indent_arr;        // indentation for each level in hierarchy
    var $is_bullet_arr;     // type of bullet for each level in hierarchy

    function bullet () {

      $this->indent = 0;
      $this->level = 0;
      $this->indent_arr = array();
      $this->is_bullet_arr = array();
    }

    // close off any bullets that are still open
    function close_open_bullets () {
      global $blank;
      for ($i = $this->level; $i > 0; $i--) {
        echo substr ($blank, 0, $this->indent_arr[$i]);
        if ($this->is_bullet_arr[$i])
            echo "</ul>\n";
        else
            echo "</ol>\n";
      }
      $this->level = 0;
      $this->indent = 0;
    }
  }

  // returns whether or not this line begins with slide markup (<slide>
  // <li>, <ln>, -,  or +
  function is_markup ($line) {
    if (eregi ("^ *<slide>", $line))
      return (true);
    if (eregi ("^ *<l[in]>", $line))
      return (true);
    if (eregi ("^ *-", $line) || eregi ("^ *\\+", $line))
      return (true);

    return (false);
  }

  //main
  $debug = false;
  $show_comments = true;
  $show_top_level_slides = false;

  $slide_title_fmt  = "<h2 align=center><font color=#000099> %s </font></h2>\n";
  $level_fmt[1]     = "<font size=5> %s </font>";
  $level_fmt[2]     = "<font size=4> %s </font>";
  $level_fmt[3]     = "<font size=3> %s </font>";
  $new_page         = true;
  $level_fmt[1]     = "<p> <font size=5> %s </font></p>";
  $level_fmt[2]     = "<font size=4> %s </font>";
  $level_fmt[3]     = "<font size=3> %s </font>";

  $outline_fmt[1]   = "<font size=5> %s </font>";
  $outline_fmt[2]   = "<font size=4> %s </font>";

  for ($i = 1; $i < count ($argv); $i++) {
    $arg = $argv[$i];
    if ($arg == "-small") {
      $slide_title_fmt     = "<h4> %s </h4>\n";
      $level_fmt[1]        = "<font size=4> %s </font>";
      $level_fmt[2]        = "<font size=3> %s </font>";
      $level_fmt[3]        = "<font size=2> %s </font>";
      $outline_fmt[1]   = "<font size=4> %s </font>";
      $outline_fmt[2]   = "<font size=3> %s </font>";
      $new_page            = false;
    } else if ($arg == "-debug") {
      $debug = true;
    } else if (strpos ($arg, "-") === 0) {
      usage ("Unexpected argument '$arg'");
      exit (1);
    } else {
      usage ("Unexpected argument '$arg'");
      exit (1);
    }
  }

  $bullet = new bullet();
  $last_indent = 0;
  $blank = "                                                        ";

  $fp = fopen ("php://stdin", "r");

  // Get an outline of the presentation
  $levels = array();
  $outline = array();
  $last_name = "";
  $last_indent = -1;
  $level = 0;
  while (!feof ($fp)) {
    $line = rtrim (fgets ($fp, 1024));
    $line = str_replace ("comment", "bla", $line);
    if (strpos (trim($line), "#") === 0)
      continue;

    if (eregi ("^ *<slide>", $line) || eregi ("^ *<slide-li>", $line)) {
      $indent = strspn ($line, " ");
      $sarr = split ("  *", trim($line), 2);
      if ($indent > $last_indent) {
        $level++;
        $levels[$level] = $indent;
      } else if ($indent < $last_indent) {
        for ($i = $level; $i > 0; $i--)
          if ($levels[$i] == $indent)
            break;
        $level = $i;
      }
      if ($sarr[1] != $last_name) {
        $outline[] = new item ($sarr[1], $level, $sarr[0]);
        $last_indent = $indent;
        $last_name = $sarr[1];
      }
    }
  }

  // Debug print the full outline
  if ($debug) {
    foreach ($outline as $item) {
      printf ("%d %s %s\n", $item->level, $item->name, $item->type);
    }
  }

  // Process the presentation
  rewind ($fp);
  while (!feof ($fp)) {
    $line = rtrim (fgets ($fp, 1024));
    if ($show_comments)
      // $line = ereg_replace ("comment", "[[<b>\\1</b>]]", $line);
      $line = str_replace ("comment", "bla", $line);
    else
      $line = ereg_replace ("comment\{.*}", "", $line);
    if (strpos (trim($line), "#") === 0)
      continue;
    $indent = strspn ($line, " ");

    // convert leading - to <li>
    $line = ereg_replace ("^( *)-", "\\1<li>", $line);

    // if this defines a slide
    if (eregi ("^ *<slide>", $line)) {

      // Close off any bullets from the previous slide
      $bullet->close_open_bullets();

      // put out the slide start
      $txt = eregi_replace ("^ *<slide>", "", $line);
      if ($new_page)
        echo ("<hr class=PAGE-BREAK>\n");
      else
        echo "<hr>\n";
      printf ($slide_title_fmt, $txt);

      // start with no modification to the formatting level
      $level_inc = 0;

    // else if this is <tight> command
    } else if (eregi ("^ *<tight>", $line)) {

      // increment the formatting for a tighter appearance
      $level_inc++;

    // else if this is a bullet or numbered list
    } else if (eregi ("^ *<l[in]>", $line)) {

      // echo "processing bullet $line\n";
      $is_bullet = eregi ("^ *<li>", $line);

      // Put out a bullet according to indentation
      $txt = eregi_replace ("^ *<l[in]>", "", $line);
      if ($indent > $bullet->indent) {
        echo substr ($blank, 0, $bullet->indent);
        if ($is_bullet)
          echo "<ul>\n";
        else // numbered list
          echo "<ol>\n";
        $bullet->level++;
        $bullet->indent_arr[$bullet->level] = $indent;
        $bullet->is_bullet_arr[$bullet->level] = $is_bullet;
        if ($debug)
          logmsg ("set indent at $bullet->level to $indent at $line\n");
      } else if ($indent < $bullet->indent) {
        echo substr ($blank, 0, $indent);
        do {
          $bullet->level--;
          if ($bullet->is_bullet_arr[$bullet->level])
            echo "</ul>\n";
          else
            echo "</ol>\n";
          $this_indent_level = $bullet->indent_arr[$bullet->level];
          if ($debug)
            logmsg ("indent = $indent, level = $bullet->level, "
                 . "arr = $this_indent_level, line = $line\n");
        } while ($bullet->indent_arr[$bullet->level] > $indent);
      }
      $bullet->indent = $indent;
      echo substr ($blank, 0, $indent);
      echo "<li> ";
      $nline = "";
      do {
        $txt .= $nline;
        $pos = ftell ($fp);
        $nline = rtrim (fgets ($fp, 1024));
        $spos = strpos (trim($nline), "#");
        // echo "strpos for '$nline' =  '$spos'<br>\n";
        if (strpos (trim($nline), "#") === 0) {
          // echo "comment here<br>\n";
          $nline = "";
          continue;
        }
        if ($show_comments)
          $nline = ereg_replace ("comment\{(.*)}", "[[<b>\\1</b>]]", $nline);
        else
          $nline = ereg_replace ("comment\{.*}", "", $nline);
        $nindent = strspn ($nline, " ");
      } while ($nline && !is_markup ($nline));
        // && (($nindent == $indent) || ($nindent == ($indent+2))));
      fseek ($fp, $pos);
      $txt = fix_txt ($txt);
      printf ($level_fmt[$bullet->level + $level_inc] . "\n", "$txt");

    // else if this slide is an image
    } else if (eregi ("^ *<slide-img>", $line)) {

      // Close off any bullets from the previous slide
      $bullet->close_open_bullets();

      //put out the image as a slide
      $sarr = split ("  *", $line, 4);
      $img = $sarr[2];
      $title = $sarr[3];
      if ($new_page)
        echo ("<hr class=PAGE-BREAK>\n");
      echo ("<img src=$img>\n");

    // else if this is a slide hierarchy note
    } else if (eregi ("^ *<slide-li>", $line)) {

      // Close off any bullets from the previous slide
      $bullet->close_open_bullets();

      // put out the slide start
      if ($new_page)
        echo ("<hr class=PAGE-BREAK>\n");
      else
        echo "<hr>\n";
      printf ($slide_title_fmt, "Outline");
      printf ("<ul>\n");

      //put out the outline itself
      list ($type, $name) = split ("  *", trim($line), 2);
      foreach ($outline as $item) {
        if ($item->level == 1) {
          if (!$show_top_level_slides && ($item->type == "<slide>"))
            continue;
          if ($level2)
            echo "    </ul>\n";
          echo "    <li>";
          printf ($outline_fmt[1], $item->name);
          echo "\n";
          $level2 = ($item->name == $name);
          if ($level2)
            echo "    <ul>\n";
        } else if ($level2 && $item->level == 2) {
          echo "        <li>";
          printf ($outline_fmt[2], $item->name);
          echo "\n";
        }
      }
      if ($level2)
        echo "    </ul>\n";
      echo "</ul>\n";

    // just echo through anything else
    } else {
      // if (($bullet->level > 0) && trim ($line))
      //  printf ($level_fmt[$bullet->level], $line );
      // else
      echo fix_txt ("$line\n");
    }

    $last_indent = $indent;
  }


  // Close off any bullets from the previous slide
  $bullet->close_open_bullets();

  /**
   * Replaces ascii versions of symbols (eg, >=) with their corresponding
   * html entities
   */
  function fix_txt ($txt) {
    $txt = ereg_replace ("@emph4{([^}]*)}",
                         "<font size=4 color=blue><i>\\1</i></font>", $txt);
    $txt = ereg_replace ("@emph5{([^}]*)}",
                         "<font size=5 color=blue><i>\\1</i></font>", $txt);
    $txt = ereg_replace ("@var{([^}]*)}", "<i>\\1</i>", $txt);
    $txt = ereg_replace ("@pvar{([^}]*)}", "<code>\\1</code>", $txt);
    $txt = str_replace (" ^ ", " &and ", $txt);
    $txt = str_replace (" <= ", " &le ", $txt);
    $txt = str_replace (" >= ", " &ge ", $txt);
    $txt = str_replace (" != ", " &ne ", $txt);
    $txt = str_replace (" => ", " &nbsp;&rArr&nbsp; ", $txt);
    $txt = str_replace (" !=> ", " &nbsp;&ne;>&nbsp; ", $txt);
    $txt = str_replace ("...", "&hellip;", $txt);
  return $txt;
}

  function usage ($err_msg) {
    $stderr = fopen ("php://stderr", "w");

    fputs ($stderr, $err_msg);
    fputs ($stderr, "\nusage slide2html [-small]\n");
  }

  function logmsg ($msg) {
    fputs (STDERR, $msg);
  }
?>
