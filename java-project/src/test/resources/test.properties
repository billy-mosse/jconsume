include = ./config-soot.properties

project.classes.classpath = /home/billy/Projects/git/jconsume/java-project/target/classes

# classpath necesario para correr el analisis. Es el classpath que contenga a 
# todas las clases referenciadas por la clase a analizar
application.classpath = ${java.home}/lib/rt.jar:${java.home}/lib/jce.jar:${project.classes.classpath}/../classes

# Carpeta donde dejar la salida del analysis
output.folder = ${user.dir}/output/dev

# Proveedor de invariantes. Puede tomar los valores: 
# 	- simple: un unico archivo con una entrada por c/invariante
#	- spec.fast: Archivos .spec que no tengan referencias (@id)
#	- spec.simple-references: Archivos .spec donde los call-sites y creation-sites pueden tener referencias a invariantes. Los invariantes no pueden referenciar a nada
#	- spec.full-references: Archivos .spec que pueden tener referencias sin restrciciones (salvo que no se pueden generar ciclos de referencias)
invariants.provider = spec.fast

# Directorio donde se encuentran los invariantes
invariants.repository = ${user.dir}/invariants/spec/fast

# Cuando se bindean los parametros de un metodo invocado, se asume que en el invariante para ese call
# los parametros del metodo llamado figuran con el prefijo especificado
invariants.callee.parameters.prefix = $t.

# Metodo a analizar de la clase en caso de que no se especifique ninguno como parametro
default.main-method = void main(java.lang.String[])

# Calculadora a utilizar para el analisis. Se aceptan los siguientes valores:
# - barvinok: utiliza barvinok como calculadora para hacer las operaciones.
# - constant: no realiza operaciones. Siempre devuelve 1 para el card. Util para medir performance (tiempo consumido en utilizar alguna de las otras estrategias)
calculator.type = barvinok

# Estrategia para resolver la comparacion entre polinomios. Solo aplica si el tipo de calculadora a utilizar es "barvinok". Soporta los valores
# - add: utiliza la suma para aproximar el maximo entre polinomios (default)
# - lazy: nunca resuelve los candidatos a maximo. Distribuye cuando hay que hacer alguna suma y/o comparacion
barvinok.calculator.compare-strategy = add

# Define que accion tomar cuando detectamos que ha faltado hacer el binding entre un parametro del polinomio de memoria temporal/residual
# y el dominio sobre el cual se lo quiere aplicar (en un sum o ub). Los posibles valores son
# - exceptional: Si se da este caso, se lanza una excepción informando de los parámetros para los que no se realizó binding
# - optimistic: Se asume que el parámetro no era necesario. En otras palabras, los parametros sin binding son descartados de la expresión. 
#               Es una acción optimista porque si el parámetro no formaba parte del polinomio de memoria, el efecto conseguido es no reportar error 
#               y que el analisis continue su marcha. Ademas, en este caso, descartar el parametro sigue siendo sound 
# - pesimistic: Se asume que los parámetros olvidados debian formar parte de la expresion y se agregan como variables.
#				Para la operacion de upperBound puede o no producir que la expresion de infinito. 
#               En el caso del operador de sum, genera que automaticamente el resultado de la operación sea infinito adviriendo asi que debemos agregar el binding.
#				Es pesimista pues asume que los bindings olvidados siempre eran necesarios
barvinok.calculator.binding-validator.type = exceptional

# La calculadora de barvinok necesita de un script para poder ejecutarse por consola desde un programa java (es un bug que no pudimos resolver).
# El script esta incluido en los entregables y queda a nivel de clases. Esta propiedad indica donde se encuentra dicho script
barvinok.cmd.path = ${project.classes.classpath}/../../bin/barvinok.sh

# Flag que indica si la implementacion que estamos usando para la calculadora
# soporta recibir un polinomio infinito como parametro. Hasta al version 0.31 sabemos
# que no lo soporta. Dejamos este flag para poder hacer sencillos los cambios si es que
# esto cambia en una versión futura.
barvinok.calculator.operator.sum.supports.infinite = false

# Algoritmo a utilizar para calcular el callgraph. Puede ser: "cha" o "spark" 
callgraph.algorithm = cha

test.printers.key = dot, xml, null

# El analisis de escape es k-sensitivo. Este parametro indica el valor de k.
# El valor puede ser un valor mayor o igual a -1. En caso de ser -1 el analisis 
# ser infinitamente sensitivo (k será infinito)
escape.sensitivity = -1

# Flag para indicar si el analaisis de escape debe evitar analizar aquellos metodos para los cuales posee
# un summary. Si el flag vale false entonces no se analizaran los metodos para los que existen summaries
escape.analyse.known.methods = false

# Repositorio de donde sacar los summaries de escape conocidos
escape.summary.repository.dir = ${user.dir}/summaries/escape

# El layout indica como seran organizados los resultados dentro del ${escape.summary.repository.dir}
# acepta los siguientes valores
# 	- Package: organiza los resultados en subcarpetas respetando el package de la clase para la cual se construye el summary y luego una subcarpeta extra por clase
# 	- ClassName: organiza los resultados por clase a la que pertenece el summary. El nombre de la carpeta es el fullname de la clase (package + name)
# 	- Folder: deja todos los resultados en la carpeta ${escape.summary.output.dir} sin agruparlos en subcarpetas
escape.summary.repository.layout = Folder

# Printers a utilizar para los summaries de escape. Acepta un string separado por comas con los distintos
# printers a utilizar. Se soportan los siguientes valores
# - dot: genera el .dot del grafo de escape asi como su imagen asociada en la carpeta ${output.folder}/escape
# - xml: genera un xml con el summary en la carpeta ${output.folder}/escape
# - null: no genera ninguna salida (es el equivalente a no especificar esta propiedad)
escape.summary.printer = xml, dot

# El layout indica como seran organizados los resultados dentro del ${escape.summary.output.dir}
# acepta los siguientes valores
# 	- Package: organiza los resultados en subcarpetas respetando el package de la clase para la cual se construye el summary y luego una subcarpeta extra por clase
# 	- ClassName: organiza los resultados por clase a la que pertenece el summary. El nombre de la carpeta es el fullname de la clase (package + name)
# 	- Folder: deja todos los resultados en la carpeta ${escape.summary.output.dir} sin agruparlos en subcarpetas
escape.summary.output.layout = ClassName

# Ruta donde generar los resultados (usado por los printers)
escape.summary.output.dir = ${output.folder}/escape/

# Flag para saber si queremos escribir los resultados del escape analisis.
# Solo tiene sentido poner este flag en false cuando se quiere hacer una corrida
# en modo de test y para hacer debug o bien cuando el analisis se corre utilizando 
# un repositorio existente a fin de hacer test unitarios.
escape.summary.all.enabled = false

# Flag para saber si queremos imprimir los metodos no analizados.
# Esto permite ver los escape utilizados durante el proceso a fin de comprender
# los resultados. Es util a fines de debug.
escape.summary.unanalized.enabled = false

# Da un tamaño maximo de nodos que puede tener un grafo para ser generado.
# Si tiene mas, solo mostramos el dot pero no generamos el gif.
# Si no nos importa el limite podemos poner -1 a riesgo de tardar mucho en escribir los summaries de metodos muy grandes
escape.summary.printer.dot.max-graph-size = -1

# Flag que indica si luego de generar los grafos el analisis debe dejar los archivos .dot
# utilizados para construirlos. El flag no aplica para los casos donde no se haya podido generar un grafo
# por tener mas nodos que lo indicado ${escape.summary.printer.dot.max-graph-size}. En ese caso el .dot siempre
# quedará en la carpeta de destino.
escape.summary.printer.dot.leave-source-file = true

# Flag que indica si en el summary deben figurar o no las variables del 
# metodo sobre el cual estamos construyendo el summary. En caso de ser true, 
# las variables seran eliminadas del summary dejando el grafo y la variable ret (indicando los objetos retornados)
escape.summary.remove-variables = true

# Flag que indica si antes de realizar el analisis de memoria debe correrse el escape analisis.
# Esto podria evitarse si solamente deseamos utilizar los summaries que tengamos especificados.
# Este podria ser el caso si queremos hacer una prueba del analisis de consumo y/o medir el tiempo
# de procesamiento del mismo al margen del escape analisis.
memory.run.escape.before = false

# Flag para indicar si el analaisis de memoria debe evitar analizar aquellos metodos para los cuales posee
# un summary. Si el flag vale false entonces no se analizaran los metodos para los que existen summaries
memory.analyse.known.methods = true

# Repositorio de donde sacar los summaries de memorya conocidos
memory.summary.repository.dir = ${user.dir}/summaries/memory

# El layout indica como seran organizados los resultados dentro del ${memory.summary.repository.dir}
# acepta los siguientes valores
# 	- Package: organiza los resultados en subcarpetas respetando el package de la clase para la cual se construye el summary y luego una subcarpeta extra por clase
# 	- ClassName: organiza los resultados por clase a la que pertenece el summary. El nombre de la carpeta es el fullname de la clase (package + name)
# 	- Folder: deja todos los resultados en la carpeta ${memory.summary.repository.dir} sin agruparlos en subcarpetas
memory.summary.repository.layout = ClassName

# Printers a utilizar para los summaries de memoria. Acepta un string separado por comas con los distintos
# printers a utilizar. Se soportan los siguientes valores
# - dot: genera el .dot del grafo de memoria (cada nodo esta decorado con su consumo) asi como su imagen asociada en la carpeta ${output.folder}/memory
# - xml: genera un xml con el summary en la carpeta ${output.folder}/memory
# - null: no genera ninguna salida (es el equivalente a no especificar esta propiedad)
memory.summary.printer = dot

# El layout indica como seran organizados los resultados dentro del ${memory.summary.output.dir}
# acepta los siguientes valores
# 	- Package: organiza los resultados en subcarpetas respetando el package de la clase para la cual se construye el summary y luego una subcarpeta extra por clase
# 	- ClassName: organiza los resultados por clase a la que pertenece el summary. El nombre de la carpeta es el fullname de la clase (package + name)
# 	- Folder: deja todos los resultados en la carpeta ${memory.summary.output.dir} sin agruparlos en subcarpetas
memory.summary.output.layout = ClassName

# Ruta donde generar los resultados (usado por los printers)
memory.summary.output.dir = ${output.folder}/memory/

# Flag que indica si es necesario limpiar el output folder de memory summaries antes de imprimir los summaries
clear.memory.summary.output.dir = false

# Flag para saber si queremos escribir los resultados del analisis de memoria.
# Solo tiene sentido poner este flag en false cuando se quiere hacer una corrida
# en modo de test y para hacer debug o bien cuando el analisis se corre utilizando 
# un repositorio existente a fin de hacer test unitarios.
memory.summary.all.enabled = false

# Flag para saber si queremos imprimir los metodos no analizados.
# Esto permite ver los resumenes utilizados pero que no fueron generados por la corrida
# sino que se encontraban en los repositorios. Esto permite comprender los resultados.
memory.summary.unanalized.enabled = false

# Da un tamaño maximo de nodos que puede tener un grafo para ser generado.
# Si tiene mas, solo mostramos el dot pero no generamos el gif.
# Si no nos importa el limite podemos poner -1 a riesgo de tardar mucho en escribir los summaries de metodos muy grandes
memory.summary.printer.dot.max-graph-size = -1

# Flag que indica si luego de generar los grafos el analisis debe dejar los archivos .dot
# utilizados para construirlos. El flag no aplica para los casos donde no se haya podido generar un grafo
# por tener mas nodos que lo indicado ${memory.summary.printer.dot.max-graph-size}. En ese caso el .dot siempre
# quedará en la carpeta de destino.
memory.summary.printer.dot.leave-source-file = true

# Flag que indica si en el grafo de consumo se debe mostrar el residual sumarizado. Si el flag tiene valor
# false no se mostrará un resumen del residual y el mismo podrá ser observado a partir del consumo de c/nodo 
# del grafo. Con el flag en true se mostrará un apartado para la suma de los residuales de c/nodo
memory.summary.dot.show.residual.summarized = true

memory.print.report = false