include = ./config-escape.properties
include = ./config-instrumentation.properties
include = ./config-memory.properties
include = ./config-soot.properties

# XML con la configuracion del factory a utilizar durante la ejecucion de la herramienta.
configuration.factory.file = factory-madeja-config.xml

# classpath necesario para correr el analisis. Es el classpath que contenga a 
# todas las clases referenciadas por la clase a analizar
application.classpath = ${java.home}/lib/rt.jar:${java.home}/lib/jce.jar:${project.classes.classpath}

# Carpeta donde dejar la salida del analysis
output.folder = ${project.classes.classpath}/../../../results-madeja

# Proveedor de invariantes. Puede tomar los valores: 
# 	- simple: un unico archivo con una entrada por c/invariante
#	- spec.fast: Archivos .spec que no tengan referencias (@id)
#	- spec.simple-references: Archivos .spec donde los call-sites y creation-sites pueden tener referencias a invariantes. Los invariantes no pueden referenciar a nada
#	- spec.full-references: Archivos .spec que pueden tener referencias sin restrciciones (salvo que no se pueden generar ciclos de referencias)
invariants.provider = spec.full-references

# Directorio donde se encuentran los invariantes
invariants.repository = ${project.classes.classpath}/../../invariants/spec/fullreferences

# Cuando se bindean los parametros de un metodo invocado, se asume que en el invariante para ese call
# los parametros del metodo llamado figuran con el prefijo especificado
invariants.callee.parameters.prefix = $t.

# Metodo a analizar de la clase en caso de que no se especifique ninguno como parametro
default.main-method = void main(java.lang.String[])

# Calculadora a utilizar para el analisis. Se aceptan los siguientes valores:
# - barvinok: utiliza barvinok como calculadora para hacer las operaciones.
# - constant: no realiza operaciones. Siempre devuelve 1 para el card. Util para medir performance (tiempo consumido en utilizar alguna de las otras estrategias)
calculator.type = barvinok

# Estrategia para resolver la comparacion entre polinomios. Solo aplica si el tipo de calculadora a utilizar es "barvinok". Soporta los valores
# - add: utiliza la suma para aproximar el maximo entre polinomios (default)
# - lazy: nunca resuelve los candidatos a maximo. Distribuye cuando hay que hacer alguna suma y/o comparacion
barvinok.calculator.compare-strategy = add

# Define que accion tomar cuando detectamos que ha faltado hacer el binding entre un parametro del polinomio de memoria temporal/residual
# y el dominio sobre el cual se lo quiere aplicar (en un sum o ub). Los posibles valores son
# - exceptional: Si se da este caso, se lanza una excepción informando de los parámetros para los que no se realizó binding
# - optimistic: Se asume que el parámetro no era necesario. En otras palabras, los parametros sin binding son descartados de la expresión. 
#               Es una acción optimista porque si el parámetro no formaba parte del polinomio de memoria, el efecto conseguido es no reportar error 
#               y que el analisis continue su marcha. Ademas, en este caso, descartar el parametro sigue siendo sound 
# - pesimistic: Se asume que los parámetros olvidados debian formar parte de la expresion y se agregan como variables.
#				Para la operacion de upperBound puede o no producir que la expresion de infinito. 
#               En el caso del operador de sum, genera que automaticamente el resultado de la operación sea infinito adviriendo asi que debemos agregar el binding.
#				Es pesimista pues asume que los bindings olvidados siempre eran necesarios
barvinok.calculator.binding-validator.type = exceptional

# La calculadora de barvinok necesita de un script para poder ejecutarse por consola desde un programa java (es un bug que no pudimos resolver).
# El script esta incluido en los entregables y queda a nivel de clases. Esta propiedad indica donde se encuentra dicho script
barvinok.cmd.path = ${project.classes.classpath}/../../bin/barvinok.sh

# Flag que indica si la implementacion que estamos usando para la calculadora
# soporta recibir un polinomio infinito como parametro. Hasta al version 0.31 sabemos
# que no lo soporta. Dejamos este flag para poder hacer sencillos los cambios si es que
# esto cambia en una versión futura.
barvinok.calculator.operator.sum.supports.infinite = false

# Algoritmo a utilizar para calcular el callgraph. Puede ser: "cha" o "spark" 
callgraph.algorithm = spark

# Archivo de reglas que permite especificar para los metodos no analizables el escape a utilizar asi como el 
# consumo de los mismos. Permite tener una opcion flexible para especificar resumenes muy poco precisos (un nodo para todo el metodo)
# de algunos metodos no analizables.
method.information.rules = ${project.classes.classpath}/unanalizable_rules.xml

# Indica que estrategia tomar para intentar mejorar el analisis de polimorfismo para las llamadas. Puede tomar dos valores
# 	- callgraph: Confia en el callgraph para resolver las invocaciones polimorficas y detectar la implementacion correcta. 
#				 Este enfoque puede derivar en que el callgraph resuelva que existen varias implementaciones posibles.
#	- escape: Este enfoque intenta usar la informacion de escape calculada hasta el momento del call resolver casos en que 
#			  el callgraph arroja multiples implementaciones. Si la variable sobre la que se hace el call apunta a un unico 
#             nodo y este nodo es de tipo inside, tomamos el label que identifica al nodo y extraemos de este la implementacion 
#             real a la que estamos invocando. En caso de no tener un nodo inside o apuntar a mas de un nodo, confiamos en el
#			  resultado obtenido por el callgraph (la informacion de escape no nos ayuda a determinar la implementacion que se esta 
#			  invocando en realidad. No disponemos de suficiente contexto) 
polymorphism.resolver = escape

# Flag que indica si debemos confiar en los summaries que existan en el repositorio para las interfaces.
# Si el flag esta en true y existe un summary para la interfaz, se lo utilizara en lugar de analizar el call. Esto permite
# dar una implementacion para la interfaz y evitar analizar calls potencialmente polimorficos. 
# Si esta en false o no se encuentra un summary para la interfaz en el repositorio se analizara el call y se devolvera 
# la union de todas las implementaciones del metodo encontradas en el classpath.
# Es importante entender que este flag afecta al analisis de escape y de memoria. Si se da un summary de escape, debe especificarse
# tambien el de memoria o podrian obtenerse resultados distintos a los esperados. La herramienta asume que de existir un summary
# existira el otro. 
trust.interface.summaries = false

# Flag que indica si se debe incluir en el callgraph los metodos conocidos (metodos para los que existen summaries). 
# Si el flag esta en false, el callgraph se recorta top-down si se encuentra con un metodo que tiene summary de memory y escape
# en el repositorio. Por ejemplo, si "main" llama a "b" y para "b" tenemos ambos summaries, entonces no será analizado b ni ninguno de los metodos
# que el llame (salvo que sean invocados por otro metodo para el cual no tenemos ambos parametros). Si el flag esta en true el metodo sera
# incluido en el callgraph y, por lo tanto, analizado.
# Este flag toma toma precedencia por sobre (escape.analyse.known.methods) y (memory.analyse.known.methods). Esto quiere decir que para
# que alguno de los sea tomado en cuenta, este flag debe estar en true 
callgraph.include.knwon.methods = false