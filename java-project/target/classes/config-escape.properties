# El analisis de escape es k-sensitivo. Este parametro indica el valor de k.
# El valor puede ser un valor mayor o igual a -1. En caso de ser -1 el analisis 
# ser infinitamente sensitivo (k será infinito)
escape.sensitivity = -1

# Flag para indicar si el analaisis de escape debe evitar analizar aquellos metodos para los cuales posee
# un summary. Si el flag vale false entonces no se analizaran los metodos para los que existen summaries
escape.analyse.known.methods = true

# Repositorio de donde sacar los summaries de escape conocidos
#escape.summary.repository.dir = ${project.classes.classpath}/../../summaries/escape
escape.summary.repository.dir = ${user.dir}/summaries/escape

# El layout indica como seran organizados los resultados dentro del ${escape.summary.repository.dir}
# acepta los siguientes valores
# 	- Package: organiza los resultados en subcarpetas respetando el package de la clase para la cual se construye el summary y luego una subcarpeta extra por clase
# 	- ClassName: organiza los resultados por clase a la que pertenece el summary. El nombre de la carpeta es el fullname de la clase (package + name)
# 	- Folder: deja todos los resultados en la carpeta ${escape.summary.repository.dir} sin agruparlos en subcarpetas
escape.summary.repository.layout = ClassName

# Printers a utilizar para los summaries de escape. Acepta un string separado por comas con los distintos
# printers a utilizar. Se soportan los siguientes valores
# - dot: genera el .dot del grafo de escape asi como su imagen asociada en la carpeta ${output.folder}/escape
# - xml: genera un xml con el summary en la carpeta ${output.folder}/escape
# - null: no genera ninguna salida (es el equivalente a no especificar esta propiedad)
escape.summary.printer = xml, dot

# El layout indica como seran organizados los resultados dentro del ${escape.summary.output.dir}
# acepta los siguientes valores
# 	- Package: organiza los resultados en subcarpetas respetando el package de la clase para la cual se construye el summary y luego una subcarpeta extra por clase
# 	- ClassName: organiza los resultados por clase a la que pertenece el summary. El nombre de la carpeta es el fullname de la clase (package + name)
# 	- Folder: deja todos los resultados en la carpeta ${escape.summary.output.dir} sin agruparlos en subcarpetas
escape.summary.output.layout = ClassName

# Ruta donde generar los resultados (usado por los printers)
escape.summary.output.dir = ${output.folder}/escape/

# Flag que indica si es necesario limpiar el output folder de escape summaries antes de imprimir los summaries
clear.escape.summary.output.dir = true

# Flag para saber si queremos escribir los resultados del escape analisis. 
# Con el flag en false no se genera output algun del analisis
# Solo tiene sentido poner este flag en false cuando se quiere hacer una corrida
# en modo de test y para hacer debug o bien cuando el analisis se corre utilizando 
# un repositorio existente a fin de hacer test unitarios.
escape.summary.all.enabled = true

# Flag para saber si queremos imprimir los metodos no analizados.
# Esto permite ver los escape utilizados durante el proceso a fin de comprender
# los resultados. Es util a fines de debug.
escape.summary.unanalized.enabled = false

# Da un tamaño maximo de nodos que puede tener un grafo para ser generado.
# Si tiene mas, solo mostramos el dot pero no generamos el gif.
# Si no nos importa el limite podemos poner -1 a riesgo de tardar mucho en escribir los summaries de metodos muy grandes
escape.summary.printer.dot.max-graph-size = -1

# Flag que indica si luego de generar los grafos el analisis debe dejar los archivos .dot
# utilizados para construirlos. El flag no aplica para los casos donde no se haya podido generar un grafo
# por tener mas nodos que lo indicado ${escape.summary.printer.dot.max-graph-size}. En ese caso el .dot siempre
# quedará en la carpeta de destino.
escape.summary.printer.dot.leave-source-file = false

# Flag que indica si en el summary deben figurar o no las variables del 
# metodo sobre el cual estamos construyendo el summary. En caso de ser true, 
# las variables seran eliminadas del summary dejando el grafo y la variable ret (indicando los objetos retornados)
escape.summary.remove-variables = true

# Cantidad maxima de veces que un metodo puede ser procesado. Esto limita la recursividad.
# -1 indica que no se quiere hacer ningun control (un metodo puede ser analizado infinitas veces)
escape.recursion.watchdog = -1

# Flag para indicar si a la hora de combinar el PTG de un metodo invocado y un llamador debemos incluir en el llamador
# aquellos nodos que no escapan al metodo invocado. El paper define que debemos hacerlo. Para simplificar los grafos 
# por default asumiremos que no es necesario hacerlo.
escape.interprocedural.include.captured.nodes.from.callee.into.caller = false

# Flag que indica si el summary obtenido debe ser simplificado a un PTG equivalente en cuanto a caminos que existen en el mismo.
# La simplificacion no fusiona nodos accesibles por el mismo field si no son del mismo tipo (inside / outside). 
# Tampoco fusiona nodos con distinto contexto.
escape.simplify.summary = false

# Criterio con el cual agrupar nodos accedidos desde un nodo del grafo desde el mismo field. Todos los criterios agrupan por 
# tipo de eje (inside/outside), field, tipo de nodo destino (inside / outside) y luego definen sus propios criterios extra:
#	- Careless: No toma en cuenta nada mas. Es el que comprime mas el grafo
#	- Context: Agrupa por contexto. Los objetos de distintos calls no se colapsan. No se hace diferencia entre nodos que vinieron de distinta implementacion 
#	- Implementation: Es como Context pero si separa por implementaciones del virtual call (agrupa por esto). Es el criterio que menos comprime el grafo pero 
#					  util si se quiere usar coloreo. 
escape.simplification.criteria = Careless

# En caso de usar simplificacion de grafos este Flag indica si se debe evitar agrupar nodos que son retornados con aquellos que no.
# En caso de ser true si el criterio decide que dos nodos deben estar juntos, si uno es retornado y otro no, entonces no seran agrupados.
# En caso de ser false se respeta la decision del criterio.
# El flag en true da mayor precision al escape a costa de simplificar menos 
escape.simplification.distinguish.returned = false

# En caso de usar simplificacion de grafos este Flag indica si se debe evitar agrupar nodos que escapan globalmente (esta asociado a una 
# variable estatica) con aquellos que no.
# En caso de ser true si el criterio decide que dos nodos deben estar juntos, si uno escapa globalmente y otro no, entonces no seran agrupados.
# En caso de ser false se respeta la decision del criterio.
# El flag en true da mayor precision al escape a costa de simplificar menos
escape.simplification.distinguish.escapeGlobaly = false
