# Flag que indica si antes de realizar el analisis de memoria debe correrse el escape analisis.
# Esto podria evitarse si solamente deseamos utilizar los summaries que tengamos especificados.
# Este podria ser el caso si queremos hacer una prueba del analisis de consumo y/o medir el tiempo
# de procesamiento del mismo al margen del escape analisis.
memory.run.escape.before = true

# Flag para indicar si el analaisis de memoria debe evitar analizar aquellos metodos para los cuales posee
# un summary. Si el flag vale false entonces no se analizaran los metodos para los que existen summaries
memory.analyse.known.methods = true

# Repositorio de donde sacar los summaries de memorya conocidos
#memory.summary.repository.dir = ${project.classes.classpath}/../../summaries/memory
memory.summary.repository.dir =  ${user.dir}/summaries/escape
# El layout indica como seran organizados los resultados dentro del ${memory.summary.repository.dir}
# acepta los siguientes valores
# 	- Package: organiza los resultados en subcarpetas respetando el package de la clase para la cual se construye el summary y luego una subcarpeta extra por clase
# 	- ClassName: organiza los resultados por clase a la que pertenece el summary. El nombre de la carpeta es el fullname de la clase (package + name)
# 	- Folder: deja todos los resultados en la carpeta ${memory.summary.repository.dir} sin agruparlos en subcarpetas
memory.summary.repository.layout = ClassName

# Printers a utilizar para los summaries de memoria. Acepta un string separado por comas con los distintos
# printers a utilizar. Se soportan los siguientes valores
# - dot: genera el .dot del grafo de memoria (cada nodo esta decorado con su consumo) asi como su imagen asociada en la carpeta ${output.folder}/memory
# - xml: genera un xml con el summary en la carpeta ${output.folder}/memory
# - null: no genera ninguna salida (es el equivalente a no especificar esta propiedad)
memory.summary.printer = xml

# El layout indica como seran organizados los resultados dentro del ${memory.summary.output.dir}
# acepta los siguientes valores
# 	- Package: organiza los resultados en subcarpetas respetando el package de la clase para la cual se construye el summary y luego una subcarpeta extra por clase
# 	- ClassName: organiza los resultados por clase a la que pertenece el summary. El nombre de la carpeta es el fullname de la clase (package + name)
# 	- Folder: deja todos los resultados en la carpeta ${memory.summary.output.dir} sin agruparlos en subcarpetas
memory.summary.output.layout = ClassName

# Ruta donde generar los resultados (usado por los printers)
memory.summary.output.dir = ${output.folder}/memory/

# Flag que indica si es necesario limpiar el output folder de memory summaries antes de imprimir los summaries
clear.memory.summary.output.dir = true

# Flag para saber si queremos escribir los resultados del analisis de memoria.
# Con el flag en false no se genera output algun del analisis
# Solo tiene sentido poner este flag en false cuando se quiere hacer una corrida
# en modo de test y para hacer debug o bien cuando el analisis se corre utilizando 
# un repositorio existente a fin de hacer test unitarios.
memory.summary.all.enabled = true

# Flag para saber si queremos imprimir los metodos no analizados.
# Esto permite ver los resumenes utilizados pero que no fueron generados por la corrida
# sino que se encontraban en los repositorios. Esto permite comprender los resultados.
memory.summary.unanalized.enabled = false

# Da un tamaño maximo de nodos que puede tener un grafo para ser generado.
# Si tiene mas, solo mostramos el dot pero no generamos el gif.
# Si no nos importa el limite podemos poner -1 a riesgo de tardar mucho en escribir los summaries de metodos muy grandes
memory.summary.printer.dot.max-graph-size = -1

# Flag que indica si luego de generar los grafos el analisis debe dejar los archivos .dot
# utilizados para construirlos. El flag no aplica para los casos donde no se haya podido generar un grafo
# por tener mas nodos que lo indicado ${memory.summary.printer.dot.max-graph-size}. En ese caso el .dot siempre
# quedará en la carpeta de destino.
memory.summary.printer.dot.leave-source-file = false

# Flag que indica si en el grafo de consumo se debe mostrar el residual sumarizado. Si el flag tiene valor
# false no se mostrará un resumen del residual y el mismo podrá ser observado a partir del consumo de c/nodo 
# del grafo. Con el flag en true se mostrará un apartado para la suma de los residuales de c/nodo
memory.summary.dot.show.residual.summarized = true

# Flag que indica si se debe generar como resultado del analisis un reporte HTML sumarizando
# los resultados obtenidos
memory.print.report = true

# Flag para saber si queremos imprimir los metodos no analizados en el reporte.
memory.report.unanalized.enabled = false

# Ruta donde generar el reporte del analisis
memory.report.output.dir = ${output.folder}/report

# Indica como trabajar con la posibilidad de que un virtual call ocurra en presencia de loop-invariant (en sentido code motion).
# Puede tomar tres valores:
#	- asume: asume que todos los calls ocurren en presencia de loop-invariant
#	- never: asume que ningun call ocurre en presencia de loop-invariant
# 	- infer: infiere los calls que ocurren en presencia de loop-invariant. Para esto se usa alguna implementacion de LoopInvariantOracle
memory.interprocedural.loop.invariant = infer

# Indica como summarizar el residual para los reportes y/o grafos. Puede tomar dos valores
# 	- add-all: Implementacion generica. Simplemente suma los residuales de c/particion. No depende del analisis de escape utilizado 
#	- color: Se basa en estar trabajando con escape de rinard. Suma el residual de c/call. Para c/u toma el maximo de las distintas 
#			 implementaciones (para los virtual call). Si el analisis no es k=infinito entonces puede dar bastante mal.
#			 Toma el nombre del hecho que si se pide colorear el grafo de memoria (mismo fondo significa mismo call, mismo borde misma implementacion), 
#			 entonces por c/color se suman los nodos tomando el residual de la maxima implementacion entre todos los calls
memory.residual.summarizer = color

# Flag para indicar si queremos que el grafo de memoria salga coloreado:
# 	- el fondo de los nodos indica que pertenecen a un mismo call
# 	- el borde de los nodos de un mismo color indica que pertenecen a la misma implementacion (en presencia de polimorfismo).
# Se pinta en funcion del metodo a resumir (en realidad para ser exactos por c/implementacion hay que volver a pintar, pero para no 
# hacer complejo el grafo, no lo hacemos). 
memory.summary.dot.glossOver = true
