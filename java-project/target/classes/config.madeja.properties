output.folder = ${user.dir}/results/madeja/

application.classpath = ${java.home}/lib/rt.jar:${java.home}/lib/jce.jar:${user.dir}/target/classes:${user.dir}/../jpfMonitor/bin:${user.dir}/../../../pruebas/jolden:${user.dir}/../../../pruebas

#application.classpath = ${java.home}/lib/rt.jar:${java.home}/lib/jce.jar:${user.dir}/target/jconsume2-0.0.1.jar

instrumented.code.output.dir = ${user.dir}/results/madeja/instrumentation

invariants.repository = ${user.dir}/invariants/spec/fullreferences

#Configuracion de la aplicacion
configuration.factory.file = factory-madeja-config.xml

# Estrategia de comparacion entre expresiones parametricas
#barvinok.calculator.compare-strategy = add
barvinok.calculator.compare-strategy = lazy

# Marca que un metodo no puede ser analizado mas de X veces. Esto sirve para cortar la convergencia en metodos recursivos. 
# En los ejemplos analizados no hay recursion, pero soot agrega recursion en los constructores estaticos para aproximar 
# el momento en que son invocados. Esto genera recursion cuando no deberia haberla. Para esto cortamos a fuerza bruta
# haciendo que todo metodo sea analizado una unica vez. 
escape.recursion.watchdog = 1

clear.escape.summary.output.dir = false
clear.memory.summary.output.dir = false

# Formato de salida de los summaries
escape.summary.printer = xml
memory.summary.printer = xml

# Sobreescribimos esta propiedad para que no se haga el write de los summaries de memoria
memory.summary.all.enabled = false

memory.interprocedural.loop.invariant = asume

# Utilizamos estrategia de agrupar nodos
escape.simplify.summary = true
memory.residual.summarizer = add-all
memory.summary.dot.glossOver = false

# Utilizamos estrategia de coloreo
#escape.simplify.summary = false
#memory.residual.summarizer = color
#memory.summary.dot.glossOver = true

soot.option.app = true
