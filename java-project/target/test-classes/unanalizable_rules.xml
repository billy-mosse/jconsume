<?xml version="1.0" encoding="ISO-8859-1" ?>
<rules cache-size="25">
	<rule name="methods that should be exlcuded from the analysis" type="exclude">
		<package name="java." type="startsWith">
			<method name="hasMoreElements" type="equals" />
			<method name="nextElement" type="equals" />
			<method name="hasNext" type="equals" />
			<method name="next" type="equals" />
		</package>
		
		<package name="sun." type="startsWith">
			<method name="hasMoreElements" type="equals" />
			<method name="nextElement" type="equals" />
			<method name="hasNext" type="equals" />
			<method name="next" type="equals" />
		</package>
		
		<package name="javax." type="startsWith">
			<method name="hasMoreElements" type="equals" />
			<method name="nextElement" type="equals" />
			<method name="hasNext" type="equals" />
			<method name="next" type="equals" />
		</package>
	</rule>

	<rule name="pure methods which consume 0 residual and 0 temporal resources" type="pure">
		<resources syntax="iscc">
			<temporal>{ 0 }</temporal>
			<residual>{ 0 }</residual>
		</resources>
		
		<package name="java.lang.StringBuilder" type="startsWith">
			<method name="append" type="equals" />
			<method name="toString" type="equals" />
		</package>
		
		<package name="java.util.Date" type="equals">
			<method name="&lt;init&gt;" type="equals" />
			<method name="getTime" type="equals" />
		</package>
	</rule>

	<rule name="pure methods which consume 1 residual and 0 temporal resources" type="pure">
		<resources syntax="iscc">
			<temporal>{ 0 }</temporal>
			<residual>{ 1 }</residual>
		</resources>
		
		<package name="java.lang.String" type="startsWith">
			<method name="&lt;init&gt;" type="equals" />
		</package>
		
		<package name="java.lang." type="startsWith">
			<method name="valueOf" type="equals" />
			<method name="parseInt" type="equals" />
			<method name="clone" type="equals" />
		</package>
		
		<package name="java." type="startsWith">
			<method name="equals" type="equals" />
			<method name="compare" type="equals" />
			<method name="getClass" type="equals" />
			<method name="hashCode" type="equals" />
			<method name="toString" type="equals" />
			<method name="valueOf" type="equals" />
			<method name="compareTo" type="equals" />
		</package>
		
		<package name="javax." type="startsWith">
			<method name="equals" type="equals" />
			<method name="compare" type="equals" />
			<method name="getClass" type="equals" />
			<method name="hashCode" type="equals" />
			<method name="toString" type="equals" />
			<method name="valueOf" type="equals" />
			<method name="compareTo" type="equals" />
		</package>
		
		<package name="sun." type="startsWith">
			<method name="equals" type="equals" />
			<method name="compare" type="equals" />
			<method name="getClass" type="equals" />
			<method name="hashCode" type="equals" />
			<method name="toString" type="equals" />
			<method name="valueOf" type="equals" />
			<method name="compareTo" type="equals" />
		</package>

		<package name="java.lang.System" type="startsWith">
			<method name="identityHashCode" type="equals" />
		</package>
		
		<!-- we assume that all standard class initialisers are pure!!! -->
		<package name="java." type="startsWith">
			<method name="&lt;clinit&gt;" type="equals" />
		</package>
		
		<package name="javax." type="startsWith">
			<method name="&lt;clinit&gt;" type="equals" />
		</package>
		
		<package name="sun." type="startsWith">
			<method name="&lt;clinit&gt;" type="equals" />
		</package>
  
		<!-- if we define these as pure, the analysis will find them impure as
			 they call static native functions that could, in theory,
			 change the whole program state under our feets -->
		<package name="java.lang.Math" type="startsWith">
			<method name="abs" type="equals" />
			<method name="acos" type="equals" />
			<method name="asin" type="equals" />
			<method name="atan" type="equals" />
			<method name="atan2" type="equals" />
			<method name="ceil" type="equals" />
			<method name="cos" type="equals" />
			<method name="exp" type="equals" />
			<method name="floor" type="equals" />
			<method name="IEEEremainder" type="equals" />
			<method name="log" type="equals" />
			<method name="max" type="equals" />
			<method name="min" type="equals" />
			<method name="pow" type="equals" />
			<method name="rint" type="equals" />
			<method name="round" type="equals" />
			<method name="sin" type="equals" />
			<method name="sqrt" type="equals" />
			<method name="tan" type="equals" />
		</package>

		<package name="java.lang.Throwable" type="startsWith">
			<method name="&lt;init&gt;" type="equals" />
		</package>
		
		<!-- to break the cycle exception -> getCharsAt -> exception -->
		<package name="java.lang.StringIndexOutOfBoundsException" type="startsWith">
			<method name="&lt;init&gt;" type="equals" />
		</package>
	
		<!-- Agrego los que necesitamos para el MST -->
		<package name="java.lang.Integer" type="equals">
			<method name="toString" type="equals" />
			<method name="&lt;init&gt;" type="equals" />
			<method name="intValue" type="equals" />
		</package>
		
		<package name="java.lang.StringBuilder" type="equals">
			<method name="&lt;init&gt;" type="equals" />
			<method name="toString" type="equals" />
			<method name="append" type="equals" />
		</package>
		
		<package name="java.lang.RuntimeException" type="equals">
			<method name="&lt;init&gt;" type="equals" />
		</package>
		
		<package name="java.lang.String" type="equals">
			<method name="startsWith" type="equals" />
		</package>
		
		<package name="java.lang.System" type="equals">
			<method name="exit" type="equals" />
		</package>
		
		<package name="com.sun." type="startsWith">
			<method name="hashCode" type="equals" />
		</package>
		
		<!-- Para correr: em3d -->
		<!-- <package name="java." type="startsWith">
			<method name="hasMoreElements" type="equals" />
			<method name="nextElement" type="equals" />
		</package>
		
		<package name="sun." type="startsWith">
			<method name="hasMoreElements" type="equals" />
			<method name="nextElement" type="equals" />
		</package>
		
		<package name="javax." type="startsWith">
			<method name="hasMoreElements" type="equals" />
			<method name="nextElement" type="equals" />
		</package> -->
		
		<package name="java.util.Random" type="startsWith">
			<method name="nextDouble" type="equals" />
			<method name="nextInt" type="equals" />
			<method name="&lt;init&gt;" type="equals" />
		</package>
		
		<package name="java.io." type="startsWith">
			<method name="print" type="equals" />
			<method name="println" type="equals" />
		</package>
	</rule>
	
	<rule name="alter methods (unanalysed methods that alter its arguments, but have no side effect)" type="alter">
		<resources syntax="iscc">
			<temporal>{ 0 }</temporal>
			<residual>{ 0 }</residual>
		</resources>
		
		<package name="java.lang.System" type="startsWith">
			<method name="arraycopy" type="equals" />
		</package>
	
		<!-- these are really huge methods used internally by StringBuffer
			 printing => put here to speed-up the analysis -->
		<package name="java.lang.FloatingDecimal" type="startsWith">
			<method name="dtoa" type="equals" />
			<method name="developLongDigits" type="equals" />
			<method name="big5pow" type="equals" />
			<method name="getChars" type="equals" />
			<method name="roundup" type="equals" />
		</package>
		
		<!-- Los agregamos porque el test de MST daba mal porque son metodos nativos y no hay escape graph para esto --> 
		<package name="java.lang.Thread" type="startsWith">
			<method name="currentThread" type="equals" />
		</package>
		
		<package name="java.lang.Double" type="startsWith">
			<method name="doubleToRawLongBits" type="equals" />
			<method name="longBitsToDouble" type="equals" />
		</package>
		
		<package name="java.lang.System" type="startsWith">
			<method name="currentTimeMillis" type="equals" />
		</package>
		
		<package name="sun.misc.FloatingDecimal" type="startsWith">
			<method name="big5pow" type="equals" />
		</package>
	</rule>
	
	<rule name="impure methods (unanalysed methods that modify the whole environment)" type="impure">
		<resources syntax="iscc">
			<temporal>{ 0 }</temporal>
			<residual>{ 0 }</residual>
		</resources>
		
		<package name="java.io." type="startsWith">
			<method name="&lt;init&gt;" type="equals" />
			<method name="close" type="equals" />
			<method name="read" type="equals" />
			<method name="write" type="equals" />
			<method name="flush" type="equals" />
			<method name="flushBuffer" type="equals" />
		</package>
		
		<package name="java.lang.Runtime" type="startsWith">
			<method name="exit" type="equals" />
		</package> 
	</rule>
</rules>
